import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
 import axios from '../../redux/axios';

const initialState = {
  user: null,
  role:'',
  isFetching: false,
  isSuccess: false,
  isError: false,
  errorMessage: '',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loginUser = createAsyncThunk(
  'users/login',
  async (udata, thunkAPI) => {
    try {
      // let res = await axios.post('http://localhost:3000/auth/login', form_data, 
      //   { headers: form_data.getHeaders() });
      const response = await axios.post('/api/login',udata);

      let data = response.data;
      console.log('response')
      console.log(data)
      console.log('response', data);
      if (response.status === 200) {
        return data;
      } else {
        return thunkAPI.rejectWithValue(data);
      }
    } catch (err) {
      // console.log('Error', e.response.data);
      // thunkAPI.rejectWithValue(e.response.data);
      if (!err.response) {
        throw err
      }

      return thunkAPI.rejectWithValue(err.response.data)
    }
  }
);

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearStateAuth: (state, {payload}) => { 
      //state.user = {};
      // state.isFetching = false;
      // state.isSuccess = false;
      // state.isError = false;
      // state.errorMessage = '';
    },
    logoutAuth: (state,{payload}) => {
        state.user = {};
        state.role = '';
        state.isFetching = false;
        state.isSuccess = false;
        state.isError = false;
        state.errorMessage = '';
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [loginUser.fulfilled]: (state, { payload }) => {
         console.log('....fulfiled....')
          console.log(payload)
          state.user = payload;
          state.role = localStorage.getItem('usertype');
          state.isFetching = false;
          state.isSuccess = true;
          return state;
        },
        [loginUser.pending]: (state) => {
          state.isFetching = true;
        },
        [loginUser.rejected]: (state, { payload }) => {
          console.log('....rejected....')
          console.log('payload', payload);
          state.isFetching = false;
          state.isError = true;
          state.errorMessage = payload.error;
        }
    },

  // extraReducers: (builder) => {
  //   builder
  //     .addCase(loginUser.pending, (state) => {
  //       state.isFetching = true;
  //     })
  //     .addCase(loginUser.rejected, (state, action) => {
  //         console.log('payload', action.payload);
  //         state.isFetching = false;
  //         state.isError = true;
  //         state.errorMessage = action.payload.message;
  //     })
  //     .addCase(loginUser.fulfilled, (state, action) => {
  //       console.log(action)
  //         state.user = action.payload;
  //         state.isFetching = false;
  //         state.isSuccess = true;
  //         return state;
  //     });
  // },
});

export const {clearStateAuth,logoutAuth} = authSlice.actions;

export function clearState() {
  
  return async (dispatch) => {
    dispatch(clearStateAuth());
  }
}

export function logout() {
  
  return async (dispatch) => {
    dispatch(logoutAuth());
  }
}

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of

export const authSelector = (state) => state.auth;


export default authSlice.reducer;
